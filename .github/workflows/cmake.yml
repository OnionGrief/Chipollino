name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Configure Refal
        run: mkdir refal5 && cd ./refal5 && wget http://www.botik.ru/pub/local/scp/refal5/ref5_081222.zip && unzip ref5_081222.zip &&rm makefile && cp makefile.lin makefile && make
      - name: test Refal
        run: cd ./refal5 && export PATH=$PATH:$(pwd) && echo $(pwd) >> $GITHUB_PATH
      - name: build Refal program
        run: cd ./refal && ls *.ref && find . -type f -name "*.ref" | xargs refc  && ls *.rsl
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build

      - name: Test
        #working-directory: ${{github.workspace}}/build/apps/TestsApp
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # ну почему не из корня ...
        #run: ctest -C ${{env.BUILD_TYPE}}
        run: ./build/apps/TestsApp/TestsApp
    
        